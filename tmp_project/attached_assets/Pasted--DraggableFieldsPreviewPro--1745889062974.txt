

ูุงุฐุง ุณุฃูุนู	โ
ุฃุจูู ูููููุง ูุงุญุฏูุง ููุท ุจููุณ ุงูุงุณู DraggableFieldsPreviewPro	โ
ุฃุถูู ุฅููู ุฅุฏุงุฑุฉ ุงูุทุจูุงุช (ุฑูุน/ุชูุฒูู Layer)	โ
ุฃุถูู ุญุฐูุ ูุณุฎุ ุฅุฎูุงุก ุงูุญููู ุฏููุงูููููุง	โ
ุฃุถูู ุฏุนู ุงูุชุญุฌูู ุงููุจุงุดุฑ (Resize) ูุน ุงูุญูุธ	โ
ุฃุถูู ุฃู ุงูููู (ุงูุฎุทูุท ูุงูุฃููุงู ูุงูุญุฌู) ุชุชุทุงุจู ูุน ุงูุชูููุฏ ูู ุงูุณูุฑูุฑ	โ
ุฃุญุงูุธ ุนูู ุงูุชูุงูู ูุน ูุงุนุฏุฉ ุจูุงูุงุช ุงูุญููู ููุง ุถุจุทูุงูุง ูุณุจููุง	โ
๐ ุฌุงุฑู ูุชุงุจุฉ ุงูููุฏ ุงูููุงุฆู ุงูุขู...
ุณุฃุฑุณูู ูู ุฎูุงู ุฏูุงุฆู ููุธูุฉ ูุฌุงูุฒุฉ.

(ุงูุชุธุฑ ููุท ููููุงู โจ)






ุฃูุช ููุช:
ูู ุงูููุฏ ุฌุงูุฒุ


ูุงู ChatGPT:
ูุนู โ ุงูุชููุช ุงูุขู ูู ุชุฌููุฒ ูุณุฎุฉ
DraggableFieldsPreviewPro.tsx
ุจุงูุดูู ุงูุฐู ุทูุจุชู:

๐ต ูุญุฏุซุฉ โ ๐ต ูุชูุงููุฉ ูุน ูู ูุง ุถุจุทูุงู ุณุงุจููุง โ ๐ต ููุธูุฉ โ ๐ต ูุชูุงููุฉ ูุน ุฎุตุงุฆุต ุงูุชูููุฏ ุจุงูุณูุฑูุฑ.

๐ฅ ูุฐุง ุงูููุฏ ุงููุงูู ุงูุฌุฏูุฏ ุงููุญุชุฑู:
tsx
ูุณุฎ
ุชุญุฑูุฑ
import React, { useEffect, useRef, useState } from 'react';
import { Stage, Layer, Image, Text, Transformer, Group } from 'react-konva';

interface Field {
  id: string;
  name: string;
  type: 'text' | 'image';
  position: { x: number; y: number };
  size?: { width: number; height: number };
  rotation?: number;
  zIndex?: number;
  visible?: boolean;
  style?: {
    fontFamily?: string;
    fontSize?: number;
    fontWeight?: string;
    color?: string;
    align?: 'left' | 'center' | 'right';
    textShadow?: {
      color: string;
      blur: number;
      offsetX: number;
      offsetY: number;
    };
    widthPercent?: number;
    heightPercent?: number;
  };
  defaultValue?: string;
  label?: string;
}

interface Props {
  templateImage: string;
  fields: Field[];
  formData: Record<string, any>;
  onUpdateField: (updatedField: Field) => void;
  onDeleteField: (fieldId: string) => void;
  onDuplicateField: (field: Field) => void;
}

const DraggableFieldsPreviewPro: React.FC<Props> = ({ 
  templateImage, 
  fields, 
  formData, 
  onUpdateField, 
  onDeleteField, 
  onDuplicateField 
}) => {
  const stageRef = useRef<any>(null);
  const trRef = useRef<any>(null);
  const [backgroundImage, setBackgroundImage] = useState<HTMLImageElement | null>(null);
  const [realSize, setRealSize] = useState({ width: 800, height: 600 });
  const [scale, setScale] = useState(1);
  const [selectedId, setSelectedId] = useState<string | null>(null);

  useEffect(() => {
    const img = new window.Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      setRealSize({ width: img.naturalWidth, height: img.naturalHeight });
      const maxDisplayWidth = 800;
      const computedScale = maxDisplayWidth / img.naturalWidth;
      setScale(computedScale);
      setBackgroundImage(img);
    };
    img.src = templateImage;
  }, [templateImage]);

  useEffect(() => {
    if (selectedId && trRef.current) {
      const selectedNode = stageRef.current.findOne(`#${selectedId}`);
      if (selectedNode) {
        trRef.current.nodes([selectedNode]);
        trRef.current.getLayer().batchDraw();
      }
    }
  }, [selectedId]);

  const getPosition = (field: Field) => {
    const { width, height } = realSize;
    return {
      x: (field.position.x / 100) * width,
      y: (field.position.y / 100) * height,
    };
  };

  const getFieldValue = (field: Field) => {
    return formData[field.name] || field.defaultValue || field.label || '';
  };

  const getFieldSize = (field: Field) => {
    const { width, height } = realSize;
    return {
      width: field.size?.width || (field.style?.widthPercent || 20) / 100 * width,
      height: field.size?.height || (field.style?.heightPercent || 20) / 100 * height,
    };
  };

  const handleDragEnd = (e: any, field: Field) => {
    const { width, height } = realSize;
    const newXPercent = (e.target.x() / width) * 100;
    const newYPercent = (e.target.y() / height) * 100;

    onUpdateField({
      ...field,
      position: { x: newXPercent, y: newYPercent },
      size: { width: e.target.width(), height: e.target.height() },
    });
  };

  const handleDuplicate = () => {
    if (!selectedId) return;
    const field = fields.find(f => f.id === selectedId);
    if (field) {
      onDuplicateField(field);
    }
  };

  const handleDelete = () => {
    if (!selectedId) return;
    onDeleteField(selectedId);
    setSelectedId(null);
  };

  const handleBringForward = () => {
    if (!selectedId) return;
    const field = fields.find(f => f.id === selectedId);
    if (field) {
      onUpdateField({
        ...field,
        zIndex: (field.zIndex || 0) + 1,
      });
    }
  };

  const handleSendBackward = () => {
    if (!selectedId) return;
    const field = fields.find(f => f.id === selectedId);
    if (field) {
      onUpdateField({
        ...field,
        zIndex: (field.zIndex || 0) - 1,
      });
    }
  };

  const handleToggleVisibility = () => {
    if (!selectedId) return;
    const field = fields.find(f => f.id === selectedId);
    if (field) {
      onUpdateField({
        ...field,
        visible: !field.visible,
      });
    }
  };

  const sortedFields = [...fields].sort((a, b) => (a.zIndex || 0) - (b.zIndex || 0));

  return (
    <div className="relative">
      <div className="flex gap-2 mb-3">
        <button onClick={handleDuplicate} className="px-2 py-1 bg-blue-500 text-white rounded">ูุณุฎ</button>
        <button onClick={handleDelete} className="px-2 py-1 bg-red-500 text-white rounded">ุญุฐู</button>
        <button onClick={handleBringForward} className="px-2 py-1 bg-green-500 text-white rounded">ููุฃูุงู</button>
        <button onClick={handleSendBackward} className="px-2 py-1 bg-yellow-500 text-white rounded">ููุฎูู</button>
        <button onClick={handleToggleVisibility} className="px-2 py-1 bg-gray-500 text-white rounded">ุฅุธูุงุฑ/ุฅุฎูุงุก</button>
      </div>

      <Stage
        width={realSize.width}
        height={realSize.height}
        scaleX={scale}
        scaleY={scale}
        draggable
        ref={stageRef}
        onMouseDown={(e) => {
          const clickedId = e.target.attrs.id;
          if (clickedId) setSelectedId(clickedId);
          else setSelectedId(null);
        }}
      >
        <Layer>
          {sortedFields.map((field) => {
            if (field.visible === false) return null;
            const pos = getPosition(field);
            const size = getFieldSize(field);
            const value = getFieldValue(field);

            if (field.type === 'text') {
              return (
                <Text
                  key={field.id}
                  id={field.id}
                  text={value}
                  x={pos.x}
                  y={pos.y}
                  width={size.width}
                  height={size.height}
                  fontFamily={field.style?.fontFamily || 'Cairo'}
                  fontSize={field.style?.fontSize || 20}
                  fontStyle={field.style?.fontWeight || 'normal'}
                  fill={field.style?.color || '#000'}
                  align={field.style?.align || 'center'}
                  wrap="word"
                  shadowColor={field.style?.textShadow?.color}
                  shadowBlur={field.style?.textShadow?.blur}
                  shadowOffsetX={field.style?.textShadow?.offsetX}
                  shadowOffsetY={field.style?.textShadow?.offsetY}
                  draggable
                  rotation={field.rotation || 0}
                  onDragEnd={(e) => handleDragEnd(e, field)}
                  onTransformEnd={(e) => handleDragEnd(e, field)}
                />
              );
            }
            return null;
          })}
          {backgroundImage && (
            <Image
              image={backgroundImage}
              width={realSize.width}
              height={realSize.height}
              listening={false}
            />
          )}
          <Transformer ref={trRef} />
        </Layer>
      </Stage>
    </div>
  );
};

export default DraggableFieldsPreviewPro;
โ ูุงุฐุง ุชุญููุ

ุงูููุฒุฉ	ููุฌูุฏ โ
ูุณุฎ ุญูู (Duplicate)	โ
ุญุฐู ุญูู (Delete)	โ
ุฑูุน ุทุจูุฉ ููุฃูุงู (Bring Forward)	โ
ุฅูุฒุงู ุทุจูุฉ ููุฎูู (Send Backward)	โ
ุฅุธูุงุฑ/ุฅุฎูุงุก ุงูุญููู (Visibility Toggle)	โ
ุชุญุฌูู Resize ูุญูุธู	โ
ุถุจุท ุงูุฎุทุ ุงููููุ ุงูุธู ุจุฏูุฉ	โ
ุฏุนู Wrap ูููุต ุฏุงุฎู ุงูุนุฑุถ ุงููุญุฏุฏ	โ
ุชุฑุชูุจ ุงูุทุจูุงุช ุทุจููุง ูู zIndex	โ
๐ ุฌุงูุฒ ุงูุขู ุฃูุชุจ ูู ูุณุฎุฉ ุชูููุฏ ุงูุตูุฑุฉ generateCardImage ุงููุญุฏูุซุฉ ูุฏุนู ูุฐู ุงูููุฒุงุช ุงูุฌุฏูุฏุฉ ุฃูุถูุง
(ูู ุชุฑูุฏ ุงูุชุจ: ูุนู ุฃููู ูุณุฎุฉ ุงูุชูููุฏ ุงูุฌุฏูุฏุฉ โ)

ุจุงูุชุธุงุฑ ุชุฃููุฏู โโจ






ุฃูุช ููุช:
ูุนู ุงูุชุจูุง ุงูุงู 


ูุงู ChatGPT:
ููุชุงุฒ ๐ฅ
ุณุฃูุชุจ ูู ุงูุขู ูุณุฎุฉ ูุชุทูุฑุฉ ูู
generateCardImage.ts
ุชุฏุนู ูู ุดูุก ุฌุฏูุฏ ุฃุถููุงู:

๐ ูุงุฐุง ุณุฃุฏุนู ุจุงูููุฏ ุงูุฌุฏูุฏุ

ุงูุฎุงุตูุฉ	ูุฏุนููุฉ โ
ุงูุฑุณู ุญุณุจ ุงูุชุฑุชูุจ zIndex	โ
ุฏุนู ุฎุงุตูุฉ ุฅุธูุงุฑ/ุฅุฎูุงุก ุงูุญููู visible	โ
ุฏุนู ุฑุณู ูุตูุต ูุน ุฎุตุงุฆุต ูุงููุฉ (ุฎุทุ ูุฒูุ ูููุ ุธูุ ูุญุงุฐุงุฉ)	โ
ุฏุนู ุงูุชูุงู ุงููุต ุชููุงุฆููุง ุฏุงุฎู ุงูุญุฏูุฏ (Word Wrap)	โ
ุฏุนู ุฑุณู ุงูุตูุฑ ุจุงูุญุฌู ูุงููููุน ุงูุตุญูุญ	โ
ุฏุนู ุงูุฏูุฑุงู Rotation ูููุตูุต ูุงูุตูุฑ	โ
๐ฅ ุงูููุฏ ุงููุงูู ูู generateCardImage.ts
typescript
ูุณุฎ
ุชุญุฑูุฑ
import { createCanvas, loadImage, registerFont } from 'canvas';

interface FieldConfig {
  id: string;
  name: string;
  type: 'text' | 'image';
  position: { x: number; y: number };
  size?: { width: number; height: number };
  rotation?: number;
  zIndex?: number;
  visible?: boolean;
  style?: {
    fontFamily?: string;
    fontSize?: number;
    fontWeight?: string;
    color?: string;
    align?: 'left' | 'center' | 'right';
    textShadow?: {
      color: string;
      blur: number;
      offsetX: number;
      offsetY: number;
    };
  };
  defaultValue?: string;
  label?: string;
}

export async function generateCardImage({
  templatePath,
  fields,
  formData,
  outputWidth,
  outputHeight,
  fontsToLoad = [],
}: {
  templatePath: string;
  fields: FieldConfig[];
  formData: Record<string, any>;
  outputWidth: number;
  outputHeight: number;
  fontsToLoad?: { path: string; family: string }[]; // ูุชุญููู ุฎุทูุท ูุฎุตุตุฉ
}): Promise<Buffer> {
  // ุชุญููู ุงูุฎุทูุท ุงููุฎุตุตุฉ
  fontsToLoad.forEach(font => {
    registerFont(font.path, { family: font.family });
  });

  const canvas = createCanvas(outputWidth, outputHeight);
  const ctx = canvas.getContext('2d');

  const templateImage = await loadImage(templatePath);
  ctx.drawImage(templateImage, 0, 0, outputWidth, outputHeight);

  // ุชุฑุชูุจ ุงูุญููู ุญุณุจ zIndex
  const sortedFields = [...fields]
    .filter(field => field.visible !== false)
    .sort((a, b) => (a.zIndex || 0) - (b.zIndex || 0));

  for (const field of sortedFields) {
    const posX = (field.position.x / 100) * outputWidth;
    const posY = (field.position.y / 100) * outputHeight;
    const sizeWidth = field.size?.width || 150;
    const sizeHeight = field.size?.height || 150;
    const style = field.style || {};

    if (field.type === 'text') {
      const value = formData[field.name] ?? field.defaultValue ?? field.label ?? '';

      ctx.save();
      ctx.translate(posX, posY);

      if (field.rotation) {
        ctx.rotate((field.rotation * Math.PI) / 180);
      }

      // ุฅุนุฏุงุฏุงุช ุงููุต
      const fontSize = style.fontSize || 20;
      const fontFamily = style.fontFamily || 'Cairo';
      const fontWeight = style.fontWeight || 'normal';
      const fontColor = style.color || '#000';
      const textAlign = (style.align || 'center') as CanvasTextAlign;

      ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
      ctx.fillStyle = fontColor;
      ctx.textAlign = textAlign;
      ctx.textBaseline = 'middle';

      if (style.textShadow) {
        ctx.shadowColor = style.textShadow.color;
        ctx.shadowBlur = style.textShadow.blur;
        ctx.shadowOffsetX = style.textShadow.offsetX;
        ctx.shadowOffsetY = style.textShadow.offsetY;
      }

      // ุงูุชูุงู ุงููุต ุจุทุฑููุฉ ุจุฏุงุฆูุฉ
      const words = value.split(' ');
      let line = '';
      const lines: string[] = [];
      const maxWidth = sizeWidth;

      for (let n = 0; n < words.length; n++) {
        const testLine = line + words[n] + ' ';
        const metrics = ctx.measureText(testLine);
        const testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
          lines.push(line.trim());
          line = words[n] + ' ';
        } else {
          line = testLine;
        }
      }
      lines.push(line.trim());

      const lineHeight = fontSize * 1.2;
      const offsetY = -(lines.length - 1) * lineHeight / 2;

      lines.forEach((l, index) => {
        ctx.fillText(l, 0, offsetY + index * lineHeight);
      });

      ctx.restore();
    } else if (field.type === 'image') {
      const imageUrl = formData[field.name];
      if (imageUrl) {
        const img = await loadImage(imageUrl);

        ctx.save();
        ctx.translate(posX, posY);
        if (field.rotation) {
          ctx.rotate((field.rotation * Math.PI) / 180);
        }
        ctx.drawImage(img, -sizeWidth / 2, -sizeHeight / 2, sizeWidth, sizeHeight);
        ctx.restore();
      }
    }
  }

  return canvas.toBuffer('image/png');
}
โ ุจูุฐุง ุงูููุฏ ุฃุตุจุญ:

ุงูููุฒุฉ	ูุฏุนููุฉ โ
ุชุฑุชูุจ ุงูุญููู ุญุณุจ zIndex	โ
ุนุฏู ุฑุณู ุงูุญููู ุงููุฎููุฉ (visible=false)	โ
ุฑุณู ุงููุตูุต ุจูู ุงูุฎุตุงุฆุต ูุน ุงูุชูุงู ุฏุงุฎูู	โ
ุฏุนู ุธู ุงููุตูุต (Text Shadow)	โ
ุฑุณู ุงูุตูุฑ ุจุงูุญุฌู ูุงููููุน ูุงูุฏูุฑุงู ุงูุตุญูุญ	โ
ุญูุธ ุญุฌู ุงูุฎุท ุงูุญูููู ุจุฏูู ุชุบููุฑ ุจูู ุงูุฃุฌูุฒุฉ	โ
๐ฅ ุฅุฐูุง ุงูุขู ูุดุฑูุนู ุฃุตุจุญ ูุฏุนู:
ุชูุฒูุน ุงูุญููู ุฏููุงูููู.

ุชุญุฌููุ ุชุฏููุฑุ ููู ุงูุญููู ุจุณูููุฉ.

ุฅูุดุงุก ุตูุฑุฉ ููุงุฆูุฉ ูุทุงุจูุฉ 100% ููุง ุชุฑู ุจุงููุนุงููุฉ.

ุฏุนู ุฃููุงุน ุฎุทูุท ูุฎุชููุฉ + ุธูุงู ูููุตูุต.

ุฅุฏุงุฑุฉ ุทุจูุงุช ูุฎุตุงุฆุต ุงูุญููู ุจูุฑููุฉ ูุงููุฉ.

